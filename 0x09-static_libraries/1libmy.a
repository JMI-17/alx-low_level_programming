#include <unistd.h>
#include "main.h"
#include <limits.h>
#include <stddef.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
/**
* _islower - Checks if a character is lowercase.
* @c: The character to be checked
*
* Return: 1 if c is lowercase, 0 otherwise.
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}
/**
 * _isalpha - checks if a character is alphabetic
 * @c: The character to be checked
 *
 * Return: 1 if c is an alphabetic character, 0 otherwise.
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}
/**
* _abs - Compute the absolute value of an integer
* @n: The integer to find the absolute value of
*
* Return: The absolute value of n
*/
int _abs(int n)
{
if (n < 0)
return (-n);
return (n);
}
/**
* _isupper - Check if a character is uppercase
* @c: The character to be checked
*
* Return: 1 if c is uppercase, 0 otherwise
*/
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
return (1);
return (0);
}
/**
 * _isdigit - Check if a character is a digit
 * @c: The character to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
return (0);
}
/**
* _strlen - Returns the length of a string.
* @s: The input string.
*
* Return: The length of the string.
*/
int _strlen(char *s)
{
int length = 0;
while (*s != '\0')
{
length++;
s++;
}
return (length);
}
#include <unistd.h>
/**
* _puts - Prints a string followed by a new line to stdout.
* @str: The string to be printed.
*/
void _puts(char *str)
{
int i = 0;
while (str[i] != '\0')
{
write(1, &str[i], 1);
i++;
}
write(1, "\n", 1);
}
/**
* _puts - Prints a string followed by a new line to stdout.
* @str: The string to be printed.
*/
void _puts(char *s)
{
int i = 0;
while (str[i] != '\0')
{
write(1, &str[i], 1);
i++;
}
write(1, "\n", 1);
}
/**
* _strncpy - Copy a string up to n characters
* @dest: The destination string
* @src: The source string
* @n: The maximum number of characters to copy
*
* Return: A pointer to the destination string (dest)
*/
char *_strncpy(char *dest, char *src, int n)
{
int i;
for (i = 0; i < n && src[i] != '\0'; i++)
{
dest[i] = src[i];
}
for (; i < n; i++)
{
dest[i] = '\0';
}
return (dest);
}
/**
* _strncpy - Copy a string up to n characters
* @dest: The destination string
* @src: The source string
* @n: The maximum number of characters to copy
*
* Return: A pointer to the destination string (dest)
*/
char *_strcpy(char *dest, char *src, int n)
{
int i;
for (i = 0; i < n && src[i] != '\0'; i++)
{
dest[i] = src[i];
}
for (; i < n; i++)
{
dest[i] = '\0';
}
return (dest);
}
/**
* _atoi - Convert a string to an integer.
* @s: The string to convert.
*
* Return: The integer value.
*/
int _atoi(char *s) {
int result = 0;
int sign = 1;
while (*s) {
if (*s == '-') {
sign *= -1;
} else if (*s >= '0' && *s <= '9') {
int digit = *s - '0';
if ((sign == 1 && (result > INT_MAX / 10
|| (result == INT_MAX / 10 && digit > INT_MAX % 10)))
|| (sign == -1 && (result < INT_MIN / 10
|| (result == INT_MIN / 10 && digit > -(INT_MIN % 10))))){
return (result * sign);
}
result = result * 10 + digit;
} else if (result != 0) {
break;
}
s++;
}
return (result * sign);
}
/**
* _strcat - Concatenates two strings
* @dest: The destination string to which src will be appended
* @src: The source string to be appended to dest
*
* Return: A pointer to the resulting string dest
*/
char *_strcat(char *dest, char *src)
{
char *result = dest;
while (*dest != '\0')
dest++;
while (*src != '\0')
{
*dest = *src;
dest++;
src++;
}
*dest = '\0';
return (result);
}
/**
* _strncat-Concatenates two strings, using at most n bytes from src
*
* @dest: The destination string to which src will be appended
* @src: The source string to be appended to dest
* @n: The maximum number of bytes to copy from src
*
* Return: A pointer to the resulting string dest
*/
char *_strncat(char *dest, char *src, int n)
{
char *result = dest;
while (*dest != '\0')
dest++;
while (*src != '\0' && n > 0)
{
*dest = *src;
dest++;
src++;
n--;
}
*dest = '\0';
return (result);
}
/**
*_strcmp - Compare two strings lexicographically
*@s1: The first string to compare
*@s2: The second string to compare
*
*Return:
*- 0 if s1 and s2 are equal
*- a negative integer if s1 is less than s2
*- a positive integer if s1 is greater than s2
*/
int _strcmp(char *s1, char *s2)
{
while (*s1 != '\0' && *s2 != '\0')
{
if (*s1 != *s2)
{
return (*s1 - *s2);
}
s1++;
s2++;
}
return (*s1 - *s2);
}
/**
* _memset - Fills the first n bytes of the memory area pointed to by s with
* the constant byte b.
* @s: Pointer to the memory area to be filled.
* @b: The constant byte to fill the memory with.
* @n: Number of bytes to be filled.
*
* Return: A pointer to the memory area s.
*/
char *_memset(char *s, char b, unsigned int n)
{
char *ptr = s;
while (n > 0)
{
*ptr = b;
ptr++;
n--;
}
return (s);
}
/**
* _memcpy - Copies n bytes from the memory area src to the memory area dest.
* @dest: Pointer to the destination memory area.
* @src: Pointer to the source memory area.
* @n: Number of bytes to be copied.
*
* Return: A pointer to the destination memory area (dest).
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
dest[i] = src[i];
}
return (dest);
}
/**
* _strchr - Locates a character in a string.
* @s: A pointer to the string in which to search for the character.
* @c: The character to locate in the string.
*
* Return: A pointer to the first occurrence of the
* character c in the string s,or NULL if the character is not found.
*/
char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
s++;
}
if (c == '\0')
{
return (s);
}
return (NULL);
}
/**
* _strspn - Gets the length of a prefix substring.
* @s: The string to be searched.
* @accept: The string containing characters to be matched.
*
* Return: The number of bytes in the initial segment of s
* which consist only of bytes from accept.
*/
unsigned int _strspn(char *s, char *accept)
{
unsigned int count = 0;
int match;
int i = 0;
while (*s)
{
match = 0;
for (int i = 0; accept[i]; i++)
{
if (*s == accept[i])
{
match = 1;
break;
}
}
if (match)
{
count++;
s++;
}
else
{
break;
}
}

return (count);
}
/**
* _strpbrk - Searches a string for any of a set of bytes.
* @s: The string to search.
* @accept: The set of bytes to search for.
*
* Return: A pointer to the byte in @s that matches one of the bytes in @accept,
*         or NULL if no such byte is found.
*/
char *_strpbrk(char *s, char *accept)
{
if (s == NULL || accept == NULL)
return (NULL);
while (*s)
{
char *a = accept;
while (*a)
{
if (*s == *a)
{
return (s);
}
a++;
}
s++;
}
return (NULL);
}
/**
* _strstr - Locates a substring within a string.
* @haystack: The string to search in.
* @needle: The substring to find.
*
* Return: A pointer to the beginning of the located substring, or NULL if not found.
*/
char *_strstr(char *haystack, char *needle)
{
if (*needle == '\0')
return (haystack);
while (*haystack)
{
char *h = haystack;
char *n = needle;
while (*n && *h == *n)
{
h++;
n++;
}
if (*n == '\0')
return (haystack);
haystack++;
}
return (NULL);
}
